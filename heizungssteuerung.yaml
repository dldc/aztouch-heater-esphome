esphome:
  name: heizung

esp32:
  board: esp-wrover-kit
  framework:
    type: arduino

# Enable logging
logger:

# Enable debug log
debug:

# Enable Home Assistant API
api:
  encryption:
    key: "asdasdasdasdasd"
  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

ota:
  password: "dsadsadsadsadsadsa"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Heizung Fallback Hotspot"
    password: "uZ1HnNUDHQKa"


spi:
 clk_pin: GPIO18 
 mosi_pin: GPIO23
 miso_pin: GPIO19


switch:
  - platform: gpio
    pin: 33
    name: "Heizung Klubheim"
    id: heating
    icon: tc:heat-index


time:
  - platform: homeassistant
    id: ha_time
    timezone: Europe/Berlin
    on_time:
      # Every 5 minutes
      - seconds: 0
        minutes: /5
        then:


font:
  - file: '/config/esphome/font/slkscr.ttf'
    id: my_font
    size: 18

image:
  - file: "/config/esphome/img/steckdose-color.png"
    id: steckdose
    resize: 80x80
    type: RGB24

color:
  - id: my_red
    red: 100%
    green: 0%


sensor:
  - platform: wifi_signal
    name: "Heizung WiFi Signal"
    update_interval: 60s
  - platform: uptime
    name: "Heizung Uptime"
  - platform: template
    name: "temp"
    id: "temp"
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1

# temp sensor aus homeassistant    
  - platform: homeassistant
    name: "Temperature Sensor From Home Assistant"
    entity_id: sensor.scd30_temperature_2
    id: temperature

text_sensor:
  - platform: template
    name: "Heizthermostat state"
    id: htaction
    update_interval: 5s
    lambda: |-
      switch (id(heizthermostat).action) {
        case CLIMATE_ACTION_OFF:
          return (std::string) "OFF";
        case CLIMATE_ACTION_COOLING:
          return (std::string) "COOLING";
        case CLIMATE_ACTION_HEATING:
         return (std::string) "HEIZEN";
        case CLIMATE_ACTION_IDLE:
          return (std::string) "UNTAETIG";
        default:
          return (std::string) "UNKNOWN";
      }
#  - platform: template
#    name: "Heizthermostat preset"
#    id: htpreset
#    update_interval: 5s  
#    lambda: |-
#      switch (id(heizthermostat).preset) {
#        case Home:
#          return (std::string) "Home";
#        case Eco:
#          return (std::string) "Eco";
#        case CLIMATE_ACTION_HEATING:
#         return (std::string) "HEIZEN";
#        case CLIMATE_ACTION_IDLE:
#          return (std::string) "UNTAETIG";
#        default:
#          return (std::string) "UNKNOWN";
#      }
  

touchscreen:
  platform: xpt2046
  id: my_touchscreen
  cs_pin: 14
  #calibration_x_min: 3680
  #calibration_x_max: 244
  #calibration_y_min: 219
  #calibration_y_max: 3670
  calibration_x_min: 3890
  calibration_x_max: 248
  calibration_y_min: 229
  calibration_y_max: 3664
  #swap_x_y: True
  on_touch:
    - lambda: |-
          ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
              id(my_touchscreen).x,
              id(my_touchscreen).y,
              id(my_touchscreen).x_raw,
              id(my_touchscreen).y_raw
              );
#


binary_sensor:

  - platform: template
    id: activhome
    name: activhome
    publish_initial_state: False

  - platform: touchscreen
    id: touch_home
    x_min: 0
    x_max: 150
    y_min: 120
    y_max: 220
    on_press:
    - logger.log: "Home was touched"
    - climate.control:
        id: heizthermostat
        mode: heat
        preset: Home
    - rtttl.play: 'scale_up:d=32,o=5,b=100:c#,f#'
    - binary_sensor.template.publish:
        id: activhome
        state: ON

  - platform: touchscreen
    id: touch_away
    x_min: 170
    x_max: 320
    y_min: 120
    y_max: 220
    on_press:
    - logger.log: "AWAY was touched"
    - climate.control:
        id: heizthermostat
        mode: heat
        preset: AWAY
    - rtttl.play: 'scale_dwn:d=32,o=5,b=100:f#,c#'
    - binary_sensor.template.publish:
        id: activhome
        state: OFF


output:
  # backlight
  - platform: ledc
    pin: 15
    id: gpio_15_backlight_pwm
    inverted: true
  # buzzer
  - platform: ledc
    pin: GPIO21
    id: rtttl_out

# component buzzer 
rtttl:
  output: rtttl_out
  on_finished_playback:
    - logger.log: 'Song ended!'

light:
  # backlight for HA
  - platform: monochromatic
    output: gpio_15_backlight_pwm
    name: "ILI9341 Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON


climate:
  - platform: thermostat
    id: heizthermostat
    name: "Thermostat Climate Controller"
    sensor: temperature
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    min_idle_time: 30s
    visual:
      min_temperature: 10
      max_temperature: 26
      temperature_step: 0.5
    heat_action:
      - switch.turn_on: heating
    idle_action:
      - switch.turn_off: heating
    
    default_preset: AWAY
    on_boot_restore_from: default_preset
    preset:
      - name: HOME
        mode: heat
        default_target_temperature_low: 25 °C
      - name: AWAY
        mode: heat
        default_target_temperature_low: 10 °C

    preset_change:
      - logger.log: Preset has been changed!


display:
  - platform: ili9341
    model: TFT 2.4
    id: touch_display
    cs_pin: GPIO5
    dc_pin: GPIO4
    # if backlight is not controlled by pwm uncomment this 
    #led_pin:
    #  number: 15
    #  inverted: true
    reset_pin: GPIO22
    rotation: 270



###
# test display with my_red

#    lambda: |-
#      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_red));

#  it.print(0, 60, id(my_font), id(my_red), TextAlign::TOP_LEFT, "Temp SOLL: %.1f", id(heizthermostat).target_temperature);
#      it.printf(0, 80, id(my_font), "Modus: %s", id(heizthermostat).action.c_str());

#      switch (id(heizthermostat).action) {
#        case CLIMATE_ACTION_OFF:
#          it.printf(0, 80, id(my_font), "Modus: OFF");
#        case CLIMATE_ACTION_HEATING:
#          it.printf(0, 80, id(my_font), "Modus: Heizen");
#        case CLIMATE_ACTION_IDLE:
#          it.printf(0, 80, id(my_font), "Modus: Warten");
#        default:
#          it.printf(0, 80, id(my_font), "Modus: Unbekannt");
#      }


#    it.printf(0, 80, id(my_font), "Modus: %s", id(htaction));

#id(heating).state ? "ON" : "OFF"


#      if (id(heizthermostat).preset == eco) {
#        it.rectangle(0, 120, 150, 100, id(my_red));
#        it.print(20, 150, id(my_font), id(my_red), TextAlign::TOP_LEFT, "Homee");
#      }
#      else {
#        it.rectangle(0, 120, 150, 100, id(my_red));
#        it.print(20, 150, id(my_font), id(my_red), TextAlign::TOP_LEFT, "Home");
#      }

#    //  it.rectangle(0, 120, 150, 100, id(my_red));
#    //  it.print(20, 150, id(my_font), id(my_red), TextAlign::TOP_LEFT, "Home");


    lambda: |-
      it.fill(Color::BLACK);
      it.print(0, 0, id(my_font), id(my_red), TextAlign::TOP_LEFT, "DK0FR Heizungssteuerung");

      it.strftime(0, 20, id(my_font), "%a %Y-%m-%d %H:%M:%S", id(ha_time).now());
      
      it.printf(0, 40, id(my_font), "Temp IST: %.1f °C", id(temperature).state);
      it.printf(0, 60, id(my_font), "Temp SOLL: %.1f °C", id(heizthermostat).target_temperature);

      it.printf(0, 80, id(my_font), "Modus: %s, Heizung %s", id(htaction).state.c_str(), id(heating).state ? "ON" : "OFF");

      it.rectangle(0, 120, 150, 100, id(my_red));
      it.print(20, 150, id(my_font), id(my_red), TextAlign::TOP_LEFT, "HOME");
      it.rectangle(170, 120, 150, 100, id(my_red));
      it.print(190, 150, id(my_font), id(my_red), TextAlign::TOP_LEFT, "AWAY");

      if (id(activhome).state) {
        it.print(20, 170, id(my_font), id(my_red), TextAlign::TOP_LEFT, "AKTIV");
      } else {
        it.print(190, 170, id(my_font), id(my_red), TextAlign::TOP_LEFT, "AKTIV");
      }

      

      
      it.rectangle(170, 120, 150, 100, id(my_red));
      it.print(190, 150, id(my_font), id(my_red), TextAlign::TOP_LEFT, "AWAY");

